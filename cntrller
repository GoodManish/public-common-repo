// Project: CTI Upload - Option 3: Stream + Async Queue Push with Retry

// File: CtiUploadApplication.java
package com.example.ctiupload;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.scheduling.annotation.EnableAsync;

@SpringBootApplication
@EnableAsync
public class CtiUploadApplication {
    public static void main(String[] args) {
        SpringApplication.run(CtiUploadApplication.class, args);
    }
}

// File: controller/CTIUploadController.java
package com.example.ctiupload.controller;

import com.example.ctiupload.service.FileService;
import com.example.ctiupload.service.QueuePushService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import java.io.File;
import java.io.InputStream;

@RestController
@RequestMapping("/api")
public class CTIUploadController {

    @Autowired
    private FileService fileService;

    @Autowired
    private QueuePushService queuePushService;

    @PostMapping(value = "/upload", consumes = MediaType.APPLICATION_OCTET_STREAM_VALUE)
    public ResponseEntity<String> upload(HttpServletRequest request) {
        File savedFile = null;
        try (InputStream inputStream = request.getInputStream()) {
            // 1. Save file completely
            savedFile = fileService.saveStreamToFile(inputStream);

            // 2. Push to queue asynchronously
            queuePushService.pushToQueueAsync(savedFile);

            return ResponseEntity.accepted().body("File received. Queue push initiated.");
        } catch (Exception e) {
            if (savedFile != null) fileService.moveToErrorFolder(savedFile);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Upload failed");
        }
    }
}

// File: service/FileService.java
package com.example.ctiupload.service;

import org.springframework.stereotype.Service;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.*;

@Service
public class FileService {

    private static final String TEMP_DIR = "/tmp/cti";
    private static final String ERROR_DIR = "/tmp/cti/error";

    public File saveStreamToFile(InputStream inputStream) throws IOException {
        Files.createDirectories(Paths.get(TEMP_DIR));
        String filename = "cti_" + System.currentTimeMillis() + ".txt";
        Path path = Paths.get(TEMP_DIR, filename);
        Files.copy(inputStream, path, StandardCopyOption.REPLACE_EXISTING);
        return path.toFile();
    }

    public void moveToErrorFolder(File file) {
        try {
            Files.createDirectories(Paths.get(ERROR_DIR));
            Path target = Paths.get(ERROR_DIR, file.getName());
            Files.move(file.toPath(), target, StandardCopyOption.REPLACE_EXISTING);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

// File: service/QueuePushService.java
package com.example.ctiupload.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jms.core.JmsTemplate;
import org.springframework.retry.annotation.Backoff;
import org.springframework.retry.annotation.Retryable;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

import java.io.File;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;

@Service
public class QueuePushService {

    @Autowired
    private JmsTemplate jmsTemplate;

    @Async
    public void pushToQueueAsync(File file) {
        try {
            pushToQueueWithRetry(file);
        } catch (Exception e) {
            System.err.println("❌ Failed to push file to queue after retries: " + file.getName());
            e.printStackTrace();
        }
    }

    @Retryable(
        value = { Exception.class },
        maxAttempts = 3,
        backoff = @Backoff(delay = 5000)
    )
    public void pushToQueueWithRetry(File file) throws Exception {
        String fileContent = Files.readString(file.toPath(), StandardCharsets.UTF_8);
        jmsTemplate.convertAndSend("ctiQueue", fileContent);
        System.out.println("✅ File pushed to queue: " + file.getName());
    }
}

// File: config/ArtemisConfig.java
package com.example.ctiupload.config;

import org.apache.activemq.artemis.jms.client.ActiveMQConnectionFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.jms.core.JmsTemplate;
import org.springframework.retry.annotation.EnableRetry;

import javax.jms.ConnectionFactory;

@Configuration
@EnableRetry
public class ArtemisConfig {

    @Bean
    public ConnectionFactory connectionFactory() {
        return new ActiveMQConnectionFactory("tcp://localhost:61616"); // Update with real broker address
    }

    @Bean
    public JmsTemplate jmsTemplate(ConnectionFactory connectionFactory) {
        return new JmsTemplate(connectionFactory);
    }
}

// File: resources/application.yml
server:
  port: 8080

logging:
  level:
    root: INFO
