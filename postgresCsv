# **Exporting CSV from PostgreSQL Using CLI**

This guide explains how to export data from a PostgreSQL database into a CSV file using the command-line interface (CLI).

---

## **Prerequisites**
- SSH access to the PostgreSQL server.
- PostgreSQL installed on your system.
- Access to the PostgreSQL database.
- User with sufficient privileges to execute `\copy`.
- Basic knowledge of Linux CLI (if using a Linux server).

---

## **Step 1: Connect to PostgreSQL**
### **1.1 SSH into the Host Machine**
If PostgreSQL is hosted on a remote server, connect to it using SSH:
```sh
ssh your_user@your_server_ip
```
- Replace `your_user` with your SSH username.
- Replace `your_server_ip` with the actual server IP or hostname.

### **1.2 Switch to the PostgreSQL User**
PostgreSQL runs under the `postgres` user. Switch to it using:
```sh
sudo su - postgres
```

### **1.3 Connect to the PostgreSQL Database**
Now, connect to the PostgreSQL database:
```sh
psql -d your_database
```
- Replace `your_database` with the actual database name.

---

## **Step 2: Export Data to CSV**

### **2.1 Using a Generic `\copy` Command**
The `\copy` command follows this general structure:
```sh
\copy (SELECT column1, column2 FROM your_table) TO '/path/to/output.csv' WITH CSV HEADER;
```
- Replace `column1, column2` with the actual column names you want to export.
- Replace `your_table` with the correct table name.
- Replace `/path/to/output.csv` with the desired file path.

### **2.2 Using `\copy` with a Custom Query**
Now, apply it with your actual query:
```sh
\copy (SELECT column1, column2 FROM your_table WHERE some_condition LIMIT 15) TO '/home/your_user/output.csv' WITH CSV HEADER;
```

#### **Important Points:**
1. **The SQL query must be enclosed in parentheses `()`**  
   - Example: `(SELECT column1, column2 FROM your_table WHERE condition)`  
   - If you don't use parentheses, `\copy` will fail.

2. **The SQL query should not have a semicolon `;` inside the brackets**  
   - ❌ Incorrect: `\copy (SELECT * FROM your_table WHERE id > 10;) TO 'output.csv' WITH CSV HEADER;`  
   - ✅ Correct: `\copy (SELECT * FROM your_table WHERE id > 10) TO 'output.csv' WITH CSV HEADER;`  

3. **Ensure the target directory has the correct permissions**  
   - The PostgreSQL user must have write access to `/home/your_user/`.
   - If permission issues arise, consider using:
     ```sh
     chmod 777 /home/your_user/
     ```

4. **Use `WITH CSV HEADER` to include column names**  
   - If omitted, only raw data will be exported without column headers.

---

## **Step 3: Verify the Exported File**
Exit `psql` using:
```sh
\q
```
Then, check if the file exists:
```sh
ls -l /home/your_user/output.csv
```
To view the first few lines of the file:
```sh
head -5 /home/your_user/output.csv
```

---

## **Step 4: Transfer the CSV File Using WinSCP (For Windows Users)**
1. Open **WinSCP** and connect to your server.
2. Use **SFTP** or **SCP** as the file protocol.
3. Navigate to `/home/your_user/` in the right panel.
4. Download `output.csv` to your local machine.

---

## **Troubleshooting**
### **1. Permission Denied Error**
- Ensure you have write permissions to the `/home/your_user/` directory.
- Use:
  ```sh
  chmod 644 /home/your_user/output.csv
  ```
  to allow read access.

### **2. `\copy` Command Fails with Syntax Error**
- Ensure there is **no semicolon (`;`) inside the `\copy` parentheses**.
- Double-check your SQL syntax by running the query separately.

### **3. `\copy` Permission Denied Error**
- If `\copy` throws a permission error, try using the `COPY` command instead (requires superuser privileges):
  ```sh
  COPY (SELECT column1, column2 FROM your_table) TO '/path/to/output.csv' WITH CSV HEADER;
  ```
  However, `COPY` writes to the server file system, while `\copy` writes to the local machine where `psql` is running.

---

## **Conclusion**
You have successfully exported data from PostgreSQL to a CSV file using `\copy` and transferred it to your local machine. 🎉
