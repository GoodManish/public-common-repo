package com.socgen.gtba.lucidlink.refactor;

import com.socgen.gtba.lucidlink.csv.refactor.UploadPartResponseBuilder;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import software.amazon.awssdk.core.sync.RequestBody;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.CompletedPart;
import software.amazon.awssdk.services.s3.model.UploadPartRequest;
import software.amazon.awssdk.services.s3.model.UploadPartResponse;

import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;
import static org.mockito.Mockito.when;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.CompletedPart;
import software.amazon.awssdk.services.s3.model.UploadPartRequest;
import software.amazon.awssdk.services.s3.model.UploadPartResponse;

import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.CompletedPart;
import software.amazon.awssdk.services.s3.model.UploadPartRequest;
import software.amazon.awssdk.services.s3.model.UploadPartResponse;

import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

class UploadPartResponseBuilderTest {

    @Test
    void testBuildParts() throws IOException {
        // Create mock S3 client
        S3Client s3Client = Mockito.mock(S3Client.class);

        // Create a temporary file for testing
        Path path = File.createTempFile("test-file", ".tmp").toPath();

        Files.write(path, "somedata".getBytes());
        File file = path.toFile();

        // Create an instance of UploadPartResponseBuilder with the temporary file
        UploadPartResponseBuilder builder = new UploadPartResponseBuilder(file, 5 * 1024 * 1024);

        // Mock behavior for s3Client.uploadPart method
        when(s3Client.uploadPart(any(UploadPartRequest.class), any(RequestBody.class)))
                .thenReturn(UploadPartResponse.builder().eTag("mockETag").build());

        // Call the method to test
        List<CompletedPart> completedParts = builder.buildParts("bucket", "key", "uploadId", s3Client);

        // Assert the result
        assertEquals(1, completedParts.size());

        // Clean up the temporary file
        file.delete();
    }
}
