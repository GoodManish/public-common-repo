package com.example.sftpdownloader;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

@Component
@ConfigurationProperties(prefix = "sftp")
public class SftpProperties {
    private String host;
    private int port;
    private String username;
    private String privateKeyPath;
    private String remoteFile;
    private String localFile;

    // Getters and setters
    // (Generate via IDE or Lombok)
}


----

package com.example.sftpdownloader;

import com.jcraft.jsch.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.io.FileOutputStream;
import java.io.InputStream;

@Service
public class SftpService {
    private static final Logger logger = LoggerFactory.getLogger(SftpService.class);
    private final SftpProperties properties;

    public SftpService(SftpProperties properties) {
        this.properties = properties;
    }

    public void downloadFile() {
        Session session = null;
        ChannelSftp sftpChannel = null;

        try {
            JSch jsch = new JSch();
            jsch.addIdentity(properties.getPrivateKeyPath());

            session = jsch.getSession(properties.getUsername(), properties.getHost(), properties.getPort());
            session.setConfig("StrictHostKeyChecking", "no");
            session.connect(10000); // 10 seconds timeout

            sftpChannel = (ChannelSftp) session.openChannel("sftp");
            sftpChannel.connect(10000);

            try (InputStream inputStream = sftpChannel.get(properties.getRemoteFile());
                 FileOutputStream outputStream = new FileOutputStream(properties.getLocalFile())) {

                byte[] buffer = new byte[4096];
                int bytesRead;

                while ((bytesRead = inputStream.read(buffer)) != -1) {
                    outputStream.write(buffer, 0, bytesRead);
                }

                logger.info("✅ File downloaded successfully to {}", properties.getLocalFile());
            }
        } catch (Exception e) {
            logger.error("❌ Failed to download file: {}", e.getMessage(), e);
        } finally {
            if (sftpChannel != null) sftpChannel.disconnect();
            if (session != null) session.disconnect();
        }
    }
}
--------
package com.example.sftpdownloader;

import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SftpDownloaderApplication implements CommandLineRunner {

    private final SftpService sftpService;

    public SftpDownloaderApplication(SftpService sftpService) {
        this.sftpService = sftpService;
    }

    public static void main(String[] args) {
        SpringApplication.run(SftpDownloaderApplication.class, args);
    }

    @Override
    public void run(String... args) {
        sftpService.downloadFile();
    }
}
--------------
sftp:
  host: sftp.example.com
  port: 22
  username: your_sftp_user
  privateKeyPath: /app/keys/id_rsa
  remoteFile: /remote/path/file.txt
  localFile: /app/downloads/file.txt


-------
apiVersion: batch/v1
kind: CronJob
metadata:
  name: sftp-downloader-{{ .Values.env }}
spec:
  schedule: "{{ .Values.schedule }}"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: sftp-downloader
              image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
              imagePullPolicy: IfNotPresent
              volumeMounts:
                - name: keys
                  mountPath: /app/keys
                  readOnly: true
                - name: downloads
                  mountPath: /app/downloads
              envFrom:
                - configMapRef:
                    name: sftp-config-{{ .Values.env }}
          volumes:
            - name: keys
              secret:
                secretName: sftp-private-key
            - name: downloads
              emptyDir: {}
          restartPolicy: OnFailure


-------
env: dev
schedule: "0 6 * * *"  # Every day at 6 AM
image:
  repository: my-registry/sftp-downloader
  tag: latest


-----
kubectl create secret generic sftp-private-key \
  --from-file=id_rsa=/path/to/id_rsa
