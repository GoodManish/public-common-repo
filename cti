package com.example.sftpdownloader;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

@Component
@ConfigurationProperties(prefix = "sftp")
public class SftpProperties {
    private String host;
    private int port;
    private String username;
    private String privateKeyPath;
    private String remoteFile;
    private String localFile;

    // Getters and setters
    // (Generate via IDE or Lombok)
}


----

package com.example.sftpdownloader;

import com.jcraft.jsch.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.io.FileOutputStream;
import java.io.InputStream;

@Service
public class SftpService {
    private static final Logger logger = LoggerFactory.getLogger(SftpService.class);
    private final SftpProperties properties;

    public SftpService(SftpProperties properties) {
        this.properties = properties;
    }

    public void downloadFile() {
        Session session = null;
        ChannelSftp sftpChannel = null;

        try {
            JSch jsch = new JSch();
            jsch.addIdentity(properties.getPrivateKeyPath());

            session = jsch.getSession(properties.getUsername(), properties.getHost(), properties.getPort());
            session.setConfig("StrictHostKeyChecking", "no");
            session.connect(10000); // 10 seconds timeout

            sftpChannel = (ChannelSftp) session.openChannel("sftp");
            sftpChannel.connect(10000);

            try (InputStream inputStream = sftpChannel.get(properties.getRemoteFile());
                 FileOutputStream outputStream = new FileOutputStream(properties.getLocalFile())) {

                byte[] buffer = new byte[4096];
                int bytesRead;

                while ((bytesRead = inputStream.read(buffer)) != -1) {
                    outputStream.write(buffer, 0, bytesRead);
                }

                logger.info("✅ File downloaded successfully to {}", properties.getLocalFile());
            }
        } catch (Exception e) {
            logger.error("❌ Failed to download file: {}", e.getMessage(), e);
        } finally {
            if (sftpChannel != null) sftpChannel.disconnect();
            if (session != null) session.disconnect();
        }
    }
}
--------
package com.example.sftpdownloader;

import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SftpDownloaderApplication implements CommandLineRunner {

    private final SftpService sftpService;

    public SftpDownloaderApplication(SftpService sftpService) {
        this.sftpService = sftpService;
    }

    public static void main(String[] args) {
        SpringApplication.run(SftpDownloaderApplication.class, args);
    }

    @Override
    public void run(String... args) {
        sftpService.downloadFile();
    }
}
--------------
sftp:
  host: sftp.example.com
  port: 22
  username: your_sftp_user
  privateKeyPath: /app/keys/id_rsa
  remoteFile: /remote/path/file.txt
  localFile: /app/downloads/file.txt


-------
apiVersion: batch/v1
kind: CronJob
metadata:
  name: sftp-downloader-{{ .Values.env }}
spec:
  schedule: "{{ .Values.schedule }}"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: sftp-downloader
              image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
              imagePullPolicy: IfNotPresent
              volumeMounts:
                - name: keys
                  mountPath: /app/keys
                  readOnly: true
                - name: downloads
                  mountPath: /app/downloads
              envFrom:
                - configMapRef:
                    name: sftp-config-{{ .Values.env }}
          volumes:
            - name: keys
              secret:
                secretName: sftp-private-key
            - name: downloads
              emptyDir: {}
          restartPolicy: OnFailure


-------
env: dev
schedule: "0 6 * * *"  # Every day at 6 AM
image:
  repository: my-registry/sftp-downloader
  tag: latest


-----
kubectl create secret generic sftp-private-key \
  --from-file=id_rsa=/path/to/id_rsa


-------
package com.example.sftpdownloader.exception;

public class SftpConnectionException extends RuntimeException {
    public SftpConnectionException(String message, Throwable cause) {
        super(message, cause);
    }
}
package com.example.sftpdownloader.exception;

public class SftpAuthenticationException extends RuntimeException {
    public SftpAuthenticationException(String message, Throwable cause) {
        super(message, cause);
    }
}
package com.example.sftpdownloader.exception;

public class SftpFileTransferException extends RuntimeException {
    public SftpFileTransferException(String message, Throwable cause) {
        super(message, cause);
    }
}


package com.example.sftpdownloader;

import com.example.sftpdownloader.exception.*;
import com.jcraft.jsch.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.io.FileOutputStream;
import java.io.InputStream;

@Service
public class SftpService {
    private static final Logger logger = LoggerFactory.getLogger(SftpService.class);
    private final SftpProperties properties;

    public SftpService(SftpProperties properties) {
        this.properties = properties;
    }

    public void downloadFile() {
        Session session = null;
        ChannelSftp sftpChannel = null;

        try {
            JSch jsch = new JSch();
            jsch.addIdentity(properties.getPrivateKeyPath());

            session = jsch.getSession(properties.getUsername(), properties.getHost(), Integer.parseInt(properties.getPort()));
            session.setConfig("StrictHostKeyChecking", "no");

            try {
                session.connect(10000); // 10 seconds timeout
            } catch (JSchException e) {
                throw new SftpAuthenticationException("Failed to authenticate with SFTP server.", e);
            }

            try {
                sftpChannel = (ChannelSftp) session.openChannel("sftp");
                sftpChannel.connect(10000);
            } catch (JSchException e) {
                throw new SftpConnectionException("Failed to establish SFTP channel.", e);
            }

            try (InputStream inputStream = sftpChannel.get(properties.getRemoteFile());
                 FileOutputStream outputStream = new FileOutputStream(properties.getLocalFile())) {

                byte[] buffer = new byte[4096];
                int bytesRead;
                while ((bytesRead = inputStream.read(buffer)) != -1) {
                    outputStream.write(buffer, 0, bytesRead);
                }

                logger.info("✅ File downloaded successfully to {}", properties.getLocalFile());

            } catch (Exception e) {
                throw new SftpFileTransferException("Failed to transfer or save file from SFTP.", e);
            }

        } catch (RuntimeException e) {
            logger.error("SFTP error: {}", e.getMessage(), e);
            throw e;
        } catch (Exception e) {
            throw new SftpConnectionException("Unexpected error during SFTP operation.", e);
        } finally {
            if (sftpChannel != null) sftpChannel.disconnect();
            if (session != null) session.disconnect();
        }
    }
}


package com.example.sftpdownloader.exception;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

@RestControllerAdvice
public class GlobalExceptionHandler {
    private static final Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);

    @ExceptionHandler(SftpAuthenticationException.class)
    public ResponseEntity<String> handleAuth(SftpAuthenticationException ex) {
        logger.error("Auth failed: {}", ex.getMessage());
        return ResponseEntity.status(401).body("Authentication Failed: " + ex.getMessage());
    }

    @ExceptionHandler(SftpConnectionException.class)
    public ResponseEntity<String> handleConnection(SftpConnectionException ex) {
        logger.error("Connection issue: {}", ex.getMessage());
        return ResponseEntity.status(503).body("Connection Issue: " + ex.getMessage());
    }

    @ExceptionHandler(SftpFileTransferException.class)
    public ResponseEntity<String> handleFileTransfer(SftpFileTransferException ex) {
        logger.error("File transfer issue: {}", ex.getMessage());
        return ResponseEntity.status(500).body("File Transfer Failed: " + ex.getMessage());
    }
}

--------

<!-- Spring Boot Starter for JMS -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-activemq</artifactId>
</dependency>

<!-- Artemis JMS Client -->
<dependency>
    <groupId>org.apache.activemq</groupId>
    <artifactId>artemis-jms-client</artifactId>
    <version>2.33.0</version>
</dependency>
------------
sftp:
  host: ftr-box.example.com
  port: "22"
  username: your_user
  privateKeyPath: /app/keys/id_rsa
  remoteFile: /remote/path/file.txt
  localFile: /app/downloads/file.txt

spring:
  activemq:
    broker-url: tcp://activemq-host:61616
    user: admin
    password: admin
    pool:
      enabled: false

queue:
  destination: file.queue.inbox
--------------

package com.example.sftpdownloader;

import jakarta.jms.Queue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jms.core.JmsTemplate;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;

@Service
public class MessagePublisherService {
    private static final Logger logger = LoggerFactory.getLogger(MessagePublisherService.class);

    private final JmsTemplate jmsTemplate;
    private final Queue queue;

    public MessagePublisherService(JmsTemplate jmsTemplate, Queue queue) {
        this.jmsTemplate = jmsTemplate;
        this.queue = queue;
    }

    public void sendFile(String filePath) {
        try {
            byte[] fileBytes = Files.readAllBytes(Path.of(filePath));
            jmsTemplate.convertAndSend(queue, fileBytes);
            logger.info("✅ File sent to queue: {}", queue.getQueueName());
        } catch (IOException e) {
            logger.error("❌ Failed to read file at {}: {}", filePath, e.getMessage());
        } catch (Exception e) {
            logger.error("❌ Failed to send file to queue: {}", e.getMessage());
        }
    }
}


-----------
package com.example.sftpdownloader;

import jakarta.jms.Queue;
import org.apache.activemq.command.ActiveMQQueue;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class AppConfig {
    @Bean
    public Queue queue(@Value("${queue.destination}") String queueName) {
        return new ActiveMQQueue(queueName);
    }
}
----------
public class SftpService {

    private final SftpProperties properties;
    private final MessagePublisherService publisherService;

    public SftpService(SftpProperties properties, MessagePublisherService publisherService) {
        this.properties = properties;
        this.publisherService = publisherService;
    }

    public void downloadFile() {
        // ... existing SFTP download logic ...
        try (InputStream inputStream = sftpChannel.get(properties.getRemoteFile());
             FileOutputStream outputStream = new FileOutputStream(properties.getLocalFile())) {

            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = inputStream.read(buffer)) != -1) {
                outputStream.write(buffer, 0, bytesRead);
            }

            logger.info("✅ File downloaded successfully.");

            // 🆕 Send to queue after successful download
            publisherService.sendFile(properties.getLocalFile());

        } catch (Exception e) {
            throw new SftpFileTransferException("File download or messaging failed", e);
        }
    }
}
-----------
