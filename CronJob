--npa-cronjob.yaml---

{{- range $key, $job := .Values.npaCronJob }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: npa-cronjob-{{ $job.company | lower }}
spec:
  schedule: "{{ $job.schedule }}"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: npa-job
              image: your-docker-repo/your-image:latest
              env:
                - name: COMPANY_PREFIX
                  value: "{{ $job.company }}"
          restartPolicy: OnFailure
---
{{- end }}

-------------------------------------------------------
-- values-uat1.yaml ----

npaCronJob:
  ind:
    company: "IND"
    schedule: "0 10 * * *"
  sgp:
    company: "SGP"
    schedule: "0 13 * * *"
  hkg:
    company: "HKG"
    schedule: "0 16 * * *"
-------------------------------------------
-- DataService.java ---
@Value("${company.prefix:ALL}")
private String companyPrefix;

-------------------------------------------
 -- application.yaml ---

 company:
  prefix: ${COMPANY_PREFIX:ALL}
-------------------------------------------
---- Service class ----

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

@Service
public class CompanyJobService {

    @Value("${COMPANY_PREFIX:ALL}")
    private String companyPrefix;

    @Autowired
    private CompanyApiClient companyApiClient; // your API client

    public void run() {
        System.out.println("Running job for company prefix: " + companyPrefix);

        List<String> allCompanyIds = companyApiClient.fetchCompanyIds();
        List<String> filteredCompanyIds = filterByPrefix(allCompanyIds, companyPrefix);

        for (String companyId : filteredCompanyIds) {
            processCompany(companyId); // your existing logic
        }
    }

    private List<String> filterByPrefix(List<String> companyIds, String prefix) {
        if ("ALL".equalsIgnoreCase(prefix)) {
            return companyIds;
        }

        return companyIds.stream()
                .filter(id -> id.startsWith(prefix))
                .collect(Collectors.toList());
    }

    private void processCompany(String companyId) {
        // Your existing full processing pipeline
    }
}

