package com.socgen.gtba.swingtee;

import com.socgen.gtba.swingtee.config.property.XmlTagExtractor;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.ByteArrayInputStream;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.*;

class XmlTagExtractorTest {

    @Test
    void testExtractTagValue_TagExists() throws Exception {
        String xmlString = "<root><tag>Hello World</tag></root>";
        String tagName = "tag";

        String result = XmlTagExtractor.extractTagValue(xmlString, tagName);

        assertEquals("Hello World", result);
    }

    @Test
    void testExtractTagValue_TagDoesNotExist() throws Exception {
        String xmlString = "<root><anotherTag>Data</anotherTag></root>";
        String tagName = "tag";

        String result = XmlTagExtractor.extractTagValue(xmlString, tagName);

        assertEquals("", result); // Empty string expected
    }

    @Test
    void testExtractTagValue_EmptyXmlString() throws Exception {
        String xmlString = "";
        String tagName = "tag";

        String result = XmlTagExtractor.extractTagValue(xmlString, tagName);

        assertEquals("", result); // Empty string expected
    }

    @Test
    void testExtractTagValue_ExceptionDuringParsing() throws Exception {
        // Mock the DocumentBuilderFactory and DocumentBuilder to throw an exception
        DocumentBuilderFactory mockFactory = Mockito.mock(DocumentBuilderFactory.class);
        DocumentBuilder mockBuilder = Mockito.mock(DocumentBuilder.class);

        when(mockFactory.newDocumentBuilder()).thenReturn(mockBuilder);
        doThrow(new RuntimeException("Parsing error")).when(mockBuilder).parse(any(ByteArrayInputStream.class));

        // Simulate the parsing error by setting up the mocks (can be done by modifying XmlTagExtractor class to inject mocks)

        String xmlString = "<root><tag>Hello World</tag></root>";
        String tagName = "tag";

        String result = XmlTagExtractor.extractTagValue(xmlString, tagName);

        assertEquals("", result); // Empty string expected due to exception
    }

    @Test
    void testExtractTagValue_NamespaceAwareTagExists() throws Exception {
        String xmlString = "<root xmlns:ns=\"http://example.com\"><ns:tag>Hello Namespace</ns:tag></root>";
        String tagName = "tag";

        String result = XmlTagExtractor.extractTagValue(xmlString, tagName);

        assertEquals("Hello Namespace", result);
    }
}


-------------------
package com.socgen.gtba.swingtee.processor;

import com.socgen.gtba.swingtee.config.property.XmlTagExtractor;
import lombok.extern.slf4j.Slf4j;
import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.springframework.stereotype.Component;

@Slf4j
@Component
public class MxIncomingProcessor implements Processor {
    private static final String EMPTY = "";
    private static final String PSEUDO_ACK_NACK = "PseudoAckNack";
    private static final String SENDER_REFERENCE = "SenderReference";
    private static final String MESSAGE_IDENTIFFIER = "MessageIdentifier";


    @Override
    public void process(Exchange exchange) throws Exception {
        String ackNack = EMPTY;
        String senderReference = EMPTY;
        String msgIdentifier = EMPTY;

        try {
            String xml = exchange.getIn().getBody(String.class);
            ackNack = XmlTagExtractor.extractTagValue(xml, PSEUDO_ACK_NACK);
            senderReference = XmlTagExtractor.extractTagValue(xml, SENDER_REFERENCE);
            msgIdentifier = XmlTagExtractor.extractTagValue(xml, MESSAGE_IDENTIFFIER);

            log.info("ackNack" + ackNack);
            log.info("senderReference" + senderReference);
            log.info("msgIdentifier" + msgIdentifier);

        } catch (Exception e) {
            log.error("error" + e.getMessage());
        }


    }
}

