package com.socgen.gtba.swingtee;

import com.socgen.gtba.swingtee.config.property.XmlTagExtractor;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.ByteArrayInputStream;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.*;

class XmlTagExtractorTest {

    @Test
    void testExtractTagValue_TagExists() throws Exception {
        String xmlString = "<root><tag>Hello World</tag></root>";
        String tagName = "tag";

        String result = XmlTagExtractor.extractTagValue(xmlString, tagName);

        assertEquals("Hello World", result);
    }

    @Test
    void testExtractTagValue_TagDoesNotExist() throws Exception {
        String xmlString = "<root><anotherTag>Data</anotherTag></root>";
        String tagName = "tag";

        String result = XmlTagExtractor.extractTagValue(xmlString, tagName);

        assertEquals("", result); // Empty string expected
    }

    @Test
    void testExtractTagValue_EmptyXmlString() throws Exception {
        String xmlString = "";
        String tagName = "tag";

        String result = XmlTagExtractor.extractTagValue(xmlString, tagName);

        assertEquals("", result); // Empty string expected
    }

    @Test
    void testExtractTagValue_ExceptionDuringParsing() throws Exception {
        // Mock the DocumentBuilderFactory and DocumentBuilder to throw an exception
        DocumentBuilderFactory mockFactory = Mockito.mock(DocumentBuilderFactory.class);
        DocumentBuilder mockBuilder = Mockito.mock(DocumentBuilder.class);

        when(mockFactory.newDocumentBuilder()).thenReturn(mockBuilder);
        doThrow(new RuntimeException("Parsing error")).when(mockBuilder).parse(any(ByteArrayInputStream.class));

        // Simulate the parsing error by setting up the mocks (can be done by modifying XmlTagExtractor class to inject mocks)

        String xmlString = "<root><tag>Hello World</tag></root>";
        String tagName = "tag";

        String result = XmlTagExtractor.extractTagValue(xmlString, tagName);

        assertEquals("", result); // Empty string expected due to exception
    }

    @Test
    void testExtractTagValue_NamespaceAwareTagExists() throws Exception {
        String xmlString = "<root xmlns:ns=\"http://example.com\"><ns:tag>Hello Namespace</ns:tag></root>";
        String tagName = "tag";

        String result = XmlTagExtractor.extractTagValue(xmlString, tagName);

        assertEquals("Hello Namespace", result);
    }
}


-------------------
import com.socgen.gtba.swingtee.config.property.XmlTagExtractor;
import com.socgen.gtba.swingtee.processor.MxIncomingProcessor;
import org.apache.camel.Exchange;
import org.apache.camel.Message;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.mockito.Mockito.*;

class MxIncomingProcessorTest {

    @Mock
    private Exchange exchange;

    @Mock
    private Message message;

    @InjectMocks
    private MxIncomingProcessor processor;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        when(exchange.getIn()).thenReturn(message);
    }

    @Test
    void testProcess_SuccessfulExtraction() throws Exception {
        String xml = "<root><PseudoAckNack>Acknowledged</PseudoAckNack><SenderReference>ABC123</SenderReference><MessageIdentifier>MSG001</MessageIdentifier></root>";

        when(message.getBody(String.class)).thenReturn(xml);
        when(XmlTagExtractor.extractTagValue(xml, "PseudoAckNack")).thenReturn("Acknowledged");
        when(XmlTagExtractor.extractTagValue(xml, "SenderReference")).thenReturn("ABC123");
        when(XmlTagExtractor.extractTagValue(xml, "MessageIdentifier")).thenReturn("MSG001");

        processor.process(exchange);

        verify(XmlTagExtractor, times(1)).extractTagValue(xml, "PseudoAckNack");
        verify(XmlTagExtractor, times(1)).extractTagValue(xml, "SenderReference");
        verify(XmlTagExtractor, times(1)).extractTagValue(xml, "MessageIdentifier");
    }

    @Test
    void testProcess_ExceptionDuringExtraction() throws Exception {
        String xml = "<root><PseudoAckNack>Acknowledged</PseudoAckNack><SenderReference>ABC123</SenderReference><MessageIdentifier>MSG001</MessageIdentifier></root>";

        when(message.getBody(String.class)).thenReturn(xml);
        when(XmlTagExtractor.extractTagValue(xml, "PseudoAckNack")).thenThrow(new RuntimeException("Error during extraction"));

        processor.process(exchange);

        verify(XmlTagExtractor, times(1)).extractTagValue(xml, "PseudoAckNack");
        verify(XmlTagExtractor, never()).extractTagValue(xml, "SenderReference");
        verify(XmlTagExtractor, never()).extractTagValue(xml, "MessageIdentifier");
    }
}



    }
}

